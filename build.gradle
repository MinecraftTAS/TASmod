plugins {
	// loom plugin
    id 'fabric-loom' version "1.2-SNAPSHOT"
    id 'legacy-looming' version "1.2-SNAPSHOT"
}


// Set basic properties
version = project.version
group = project.group
archivesBaseName = project.artifact

// Compile for java 8
//sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

// Dependency repositories
repositories {
    mavenCentral()
    maven { url = 'https://raw.githubusercontent.com/BleachDev/cursed-mappings/main/' }
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.mgnet.work/main" }
    maven { url = 'https://repo.spongepowered.org/maven' }
}

// Dependency configurations
configurations {
    downloadMod {
    	transitive = false
    }
    embed
    implementation.extendsFrom(embed)
}

// Dependencies
dependencies {
	// tasmod dependencies (exported with jar)
    embed group: 'com.dselent', name: 'bigarraylist', version: '1.0'
    
    // add mojang mappings
    mappings "net.legacyfabric:yarn:1.12.2+build.mcp"
    
    // add fabric loader
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // add minecraft dependency
    minecraft "com.mojang:minecraft:1.12.2"
    
    // tasmod dependencies (only for compilation)
    compileOnly group: 'com.minecrafttas', name: 'killtherng', version: '2.0'
    
    // tasmod mod dependencies (only for ide)
    downloadMod 'com.minecrafttas:killtherng-full:2.0'
}

// Task for downloading KillTheRng
task downloadKTRNG(type: Copy) {
	group 'tasmod'
	description 'Downloads KillTheRNG to the run/mods/ folder of the project'
    from configurations.downloadMod
    into 'run/mods/'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", minecraft_version

    filesMatching("fabric.mod.json") {
        //include 'fabric.mod.json'

        expand 'mod_id': project.mod_id, 'mod_url': project.mod_url, 'name': project.mod_name, 'mod_version': project.version,
                'mcversion': project.minecraft_version, 'mod_description': project.mod_description
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	if (JavaVersion.current().isJava9Compatible()) it.options.release = 8

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

// Configure jar file
jar {
	archivesBaseName = "${archivesBaseName}"

	// pack embedded stuff
	from {
        configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}

tasks.named('test', Test) {
    useJUnitPlatform()

	testLogging {
		events "passed", "skipped", "failed"
	}
}